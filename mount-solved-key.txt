Ah, I see. It sounds like you're using the `key` prop to force React to remount the `News` component when navigating between routes with the same component but different props. This is a valid approach to ensure that the component unmounts and mounts again with the new props.

When you provide a `key` prop to a component in React, it tells React that this component is unique even if the component type is the same. Therefore, React will unmount the previous instance of the component and mount a new one when the `key` changes.

In your case, you provided a `key` prop with values like `"general"`, `"business"`, `"entertainment"`, etc., corresponding to different categories of news. By changing the `key` prop when navigating between routes, you're essentially forcing React to treat each instance of the `News` component as unique, ensuring that it mounts with the correct props every time.

Here's how you might implement the `key` prop in your `Route` components:

```javascript
<Route key="general" exact path="/">
  <News pageSize={5} country="in" category="general"/>
</Route>
<Route key="business" exact path="/business">
  <News pageSize={5} country="in" category="business"/>
</Route>
{/* Similar for other routes */}
```

By adding the `key` prop to each `Route` component, you're ensuring that React treats each `News` component instance as unique, allowing it to remount with the correct props when navigating between routes.

This approach works effectively in situations where you want to force a component to remount when its props change, ensuring that the component lifecycle methods are executed again with the new props. It's a useful technique for handling scenarios like yours, where components need to be reinitialized with new data based on route changes.